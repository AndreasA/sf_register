page {
	includeCSS.sf_register = EXT:sf_register/Resources/Public/Stylesheets/styles.css

	includeJSFooter.sf_register = EXT:sf_register/Resources/Public/JavaScript/sf_register.js
	includeJSFooter.passwordmeter = EXT:sf_register/Resources/Public/JavaScript/passwordmeter.js
}



plugin.tx_sfregister.settings {
	# boolean defines in edit mode if the fields get filled with data of logged in user
	useDataOfLoggedinFeuser = 1

	# comma separated list of words used in bad word validator
	badWordList = god, sex, password

	# boolean show the edit after saving the create or edit form
	forwardToEditAfterSave = 0

	# string [md5|sha1]
	encryptPassword = {$plugin.tx_sfregister.settings.encryptPassword}

	# boolean use encrypted filename to deny direct access on uploaded files
	useEncryptedFilename = 1

	# boolean if user or admin need to activate
	activateByUser = 0
	activateByAdmin = 0

	# boolean if user or admin should be notified
	# if the user gets an activation email no notification email will be send
	notifyToUser = 0
	# if the admin gets an activation email no notification email will be send
	notifyToAdmin = 0

	# integer usergroups set if activation is needed
	usergroupBeforeActivation = 1
	usergroupAfterActivation = 2

	# integer usergroup set if no activation is needed
	usergroupWithoutActivation = 2

	userEmail {
		fromName = userEmail from
		fromEmail = userEmailfrom@test.local

		replyName = userEmail reply
		replyEmail = userEmailreply@test.local
	}

	adminEmail {
		toName = adminEmail to
		toEmail = sebastian@krypton.localdomain

		fromName = adminEmail from
		fromEmail = adminEmailfrom@test.local

		replyName = adminEmail reply
		replyEmail = adminEmailreply@test.local
	}

	validation.create {
		username {
			1 = StringLength(minimum = 1, maximum = 80)
			2 = Tx_SfRegister_Domain_Validator_UniqueValidator
			3 = Tx_SfRegister_Domain_Validator_UniqueValidator(global = 1)
		}
		password = StringLength(minimum = 8, maximum = 40)
		title = StringLength(minimum = 2, maximum = 80)
		company = StringLength(minimum = 2, maximum = 80)
		firstName = StringLength(minimum = 2, maximum = 80)
		lastName = StringLength(minimum = 2, maximum = 80)
		email = EmailAddress
		gtc = Tx_SfRegister_Domain_Validator_IsTrueValidator
		image = Tx_SfRegister_Domain_Validator_ImageUploadValidator
	}

	validation.edit {
		firstName = StringLength(minimum = 2, maximum = 80)
		lastName = StringLength(minimum = 2, maximum = 80)
		email = EmailAddress
		gtc = Tx_SfRegister_Domain_Validator_IsTrueValidator
		image = Tx_SfRegister_Domain_Validator_ImageUploadValidator
	}

	validation.password {
		password {
			1 = StringLength(minimum = 2, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_BadWordValidator
		}
		passwordAgain {
			1 = StringLength(minimum = 2, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_PasswordsEqualValidator
		}
		oldPassword {
			1 = StringLength(minimum = 2, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_EqualCurrentPasswordValidator
		}
	}
}

plugin.tx_sfregister.persistence {
	storagePid =

	classes {
		Tx_SfRegister_Domain_Model_FrontendUser {
			mapping {
				tableName = fe_users
				recordType = Tx_Extbase_Domain_Model_FrontendUser
			}
		}
	}
}
page {
	includeCSS.sf_register = EXT:sf_register/Resources/Public/Stylesheets/styles.css

	includeJSFooter.sf_register = EXT:sf_register/Resources/Public/JavaScript/sf_register.js
	includeJSFooter.passwordmeter = EXT:sf_register/Resources/Public/JavaScript/passwordmeter.js
}



plugin.tx_sfregister.settings {
	# boolean defines in edit mode if the fields get filled with data of logged in user
	useDataOfLoggedinFeuser = {$plugin.tx_sfregister.settings.useDataOfLoggedinFeuser}

	# comma separated list of words used in bad word validator
	badWordList = {$plugin.tx_sfregister.settings.badWordList}

	# boolean show the edit after saving the create or edit form
	forwardToEditAfterSave = {$plugin.tx_sfregister.settings.forwardToEditAfterSave}

	# string [md5|sha1]
	encryptPassword = {$plugin.tx_sfregister.settings.encryptPassword}

	# boolean use encrypted filename to deny direct access on uploaded files
	useEncryptedFilename = {$plugin.tx_sfregister.settings.useEncryptedFilename}

	# boolean if user or admin need to activate
	activateByUser = {$plugin.tx_sfregister.settings.activateByUser}
	activateByAdmin = {$plugin.tx_sfregister.settings.activateByAdmin}

	# boolean if user or admin should be notified
	# if the user gets an activation email no notification email will be send
	notifyToUser = {$plugin.tx_sfregister.settings.notifyToUser}
	# if the admin gets an activation email no notification email will be send
	notifyToAdmin = {$plugin.tx_sfregister.settings.notifyToAdmin}

	# integer usergroups set if activation is needed
	usergroupBeforeActivation = {$plugin.tx_sfregister.settings.usergroupBeforeActivation}
	usergroupAfterActivation = {$plugin.tx_sfregister.settings.usergroupAfterActivation}

	# integer usergroup set if no activation is needed
	usergroupWithoutActivation = {$plugin.tx_sfregister.settings.usergroupWithoutActivation}

	userEmail {
		fromName = {$plugin.tx_sfregister.settings.userEmail.fromName}
		fromEmail = {$plugin.tx_sfregister.settings.userEmail.fromEmail}

		replyName = {$plugin.tx_sfregister.settings.userEmail.replyName}
		replyEmail = {$plugin.tx_sfregister.settings.userEmail.replyEmail}
	}

	adminEmail {
		toName = {$plugin.tx_sfregister.settings.adminEmail.toName}
		toEmail = {$plugin.tx_sfregister.settings.adminEmail.toEmail}

		fromName = {$plugin.tx_sfregister.settings.adminEmail.fromName}
		fromEmail = {$plugin.tx_sfregister.settings.adminEmail.fromEmail}

		replyName = {$plugin.tx_sfregister.settings.adminEmail.replyName}
		replyEmail = {$plugin.tx_sfregister.settings.adminEmail.replyEmail}
	}

	validation.create {
		username {
			1 = StringLength(minimum = 1, maximum = 80)
			2 = Tx_SfRegister_Domain_Validator_UniqueValidator
			3 = Tx_SfRegister_Domain_Validator_UniqueValidator(global = 1)
		}
		password = StringLength(minimum = 8, maximum = 40)
		title = StringLength(minimum = 2, maximum = 80)
		company = StringLength(minimum = 2, maximum = 80)
		firstName = StringLength(minimum = 2, maximum = 80)
		lastName = StringLength(minimum = 2, maximum = 80)
		email = EmailAddress
		gtc = Tx_SfRegister_Domain_Validator_IsTrueValidator
		image = Tx_SfRegister_Domain_Validator_ImageUploadValidator
	}

	validation.edit {
		firstName = StringLength(minimum = 2, maximum = 80)
		lastName = StringLength(minimum = 2, maximum = 80)
		email = EmailAddress
		gtc = Tx_SfRegister_Domain_Validator_IsTrueValidator
		image = Tx_SfRegister_Domain_Validator_ImageUploadValidator
	}

	validation.password {
		password {
			1 = StringLength(minimum = 2, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_BadWordValidator
		}
		passwordAgain {
			1 = StringLength(minimum = 2, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_PasswordsEqualValidator
		}
		oldPassword {
			1 = StringLength(minimum = 2, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_EqualCurrentPasswordValidator
		}
	}
}

plugin.tx_sfregister.persistence {
	storagePid = {$plugin.tx_sfregister.persistence.storagePid}

	classes {
		Tx_SfRegister_Domain_Model_FrontendUser {
			mapping {
				tableName = fe_users
				recordType = Tx_Extbase_Domain_Model_FrontendUser
			}
		}
	}
}
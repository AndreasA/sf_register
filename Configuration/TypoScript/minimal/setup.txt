page {
	includeCSS.sf_register = EXT:sf_register/Resources/Public/Stylesheets/styles.css

	includeJSFooter.passwordmeter = EXT:sf_register/Resources/Public/JavaScript/passwordmeter.js
	includeJSFooter.sf_register = EXT:sf_register/Resources/Public/JavaScript/sf_register.js
}



plugin.tx_sfregister.settings {
	# boolean defines in edit mode if the fields get filled with data of logged in user
	useDataOfLoggedinFeuser = 1

	# comma separated list of words used in bad word validator
	badWordList = {$plugin.tx_sfregister.settings.badWordList}

	# uid of the page to redirect to after saving
	redirectPostRegistrationPageId =

	# boolean redirect after the confirmation of the user
	redirectPostActivation = {$plugin.tx_sfregister.settings.redirectPostActivation}
	# uid of the page to redirect to after confirmation
	redirectPostActivationPageId = {$plugin.tx_sfregister.settings.redirectPostActivationPageId}

	# string [md5|sha1]
	encryptPassword =

	# boolean use encrypted filename to deny direct access on uploaded files
	useEncryptedFilename = md5

	# boolean if user or admin need to activate or notified
	notifyToAdmin = 0
	notifyPreActivationToAdmin = 0
	notifyPostActivationToAdmin = 1
	notifyToUser = 0
	notifyPreActivationToUser = 1
	notifyPostActivationToUser = 0

	# boolean if user should get logged in after registration
	autologinPostRegistration = {$plugin.tx_sfregister.settings.autologinPostRegistration}
	# boolean if user should get logged in after activation
	autologinPostActivation = {$plugin.tx_sfregister.settings.autologinPostActivation}

	# integer usergroups set if activation is needed
	usergroupPreActivation = {$plugin.tx_sfregister.settings.usergroupPreActivation}
	usergroupPostActivation = {$plugin.tx_sfregister.settings.usergroupPostActivation}

	# integer usergroup set if no activation is needed
	usergroup =

	# string name of the site used in subject
	sitename = {$plugin.tx_sfregister.settings.emailSitename}

	userEmail {
		fromName = {$plugin.tx_sfregister.settings.emailName}
		fromEmail = {$plugin.tx_sfregister.settings.emailAddress}

		replyName = {$plugin.tx_sfregister.settings.emailName}
		replyEmail = {$plugin.tx_sfregister.settings.emailAddress}

		returnPath = {$plugin.tx_sfregister.settings.emailAddress}
	}

	adminEmail {
		toName = {$plugin.tx_sfregister.settings.emailName}
		toEmail = {$plugin.tx_sfregister.settings.emailAddress}

		fromName = {$plugin.tx_sfregister.settings.emailName}
		fromEmail = {$plugin.tx_sfregister.settings.emailAddress}

		replyName = {$plugin.tx_sfregister.settings.emailName}
		replyEmail = {$plugin.tx_sfregister.settings.emailAddress}

		returnPath = {$plugin.tx_sfregister.settings.emailAddress}
	}

	validation.create {
		username {
			1 = StringLength(minimum = 1, maximum = 80)
			2 = Tx_SfRegister_Domain_Validator_UniqueValidator
			3 = Tx_SfRegister_Domain_Validator_UniqueValidator(global = 1)
		}
		password {
			1 = StringLength(minimum = 8, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_BadWordValidator
		}
		title = StringLength(minimum = 2, maximum = 80)
		company = StringLength(minimum = 2, maximum = 80)
		firstName = StringLength(minimum = 2, maximum = 80)
		lastName = StringLength(minimum = 2, maximum = 80)
		email = EmailAddress
		gtc = Tx_SfRegister_Domain_Validator_IsTrueValidator
		image = Tx_SfRegister_Domain_Validator_ImageUploadValidator
		captcha = Tx_SfRegister_Domain_Validator_CaptchaValidator(type = jmrecaptcha)
	}

	validation.edit {
		firstName = StringLength(minimum = 2, maximum = 80)
		lastName = StringLength(minimum = 2, maximum = 80)
		email = EmailAddress
		gtc = Tx_SfRegister_Domain_Validator_IsTrueValidator
		image = Tx_SfRegister_Domain_Validator_ImageUploadValidator
	}

	validation.password {
		password {
			1 = StringLength(minimum = 2, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_BadWordValidator
		}
		passwordAgain {
			1 = StringLength(minimum = 2, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_PasswordsEqualValidator
		}
		oldPassword {
			1 = StringLength(minimum = 2, maximum = 40)
			2 = Tx_SfRegister_Domain_Validator_EqualCurrentPasswordValidator
		}
	}

	filefieldname = image

	captcha {
		jmrecaptcha = Tx_SfRegister_Services_Captcha_JmRecaptchaAdapter
		srfreecap = Tx_SfRegister_Services_Captcha_SrFreecapAdapter
	}
}

plugin.tx_sfregister.persistence {
	classes {
		Tx_SfRegister_Domain_Model_FrontendUser {
			mapping {
				tableName = fe_users
				recordType = Tx_Extbase_Domain_Model_FrontendUser
			}
		}

		Tx_SfRegister_Domain_Model_StaticCountry {
			mapping {
				tableName = static_countries
			}
		}
		Tx_SfRegister_Domain_Model_StaticCountryZone {
			mapping {
				tableName = static_country_zones
			}
		}
		Tx_SfRegister_Domain_Model_StaticLanguage {
			mapping {
				tableName = static_languages
			}
		}
	}
}

plugin.tx_sfregister.fieldError = TEXT
plugin.tx_sfregister.fieldError {
	current = 1
	split {
		token = .
		cObjNum = 1

		1 = COA
		1 {
			10 = TEXT
			10.current = 1
			10.substring = 0, 1
			10.case = upper

			20 = TEXT
			20.current = 1
			20.substring = 1, 1000
			20.case = lower
		}
	}
}

plugin.tx_sfregister._LOCAL_LANG.default {
	title_none = Please select
	title_dr = Dr.
	title_prof = Prof.
	title_profdr = Prof. Dr.
}

module.tx_sfregister < plugin.tx_sfregister

config.tx_extbase.objects {
    Tx_SfRegister_Interfaces_FrontendUser {
        className = Tx_SfRegister_Domain_Model_FrontendUser
    }
}